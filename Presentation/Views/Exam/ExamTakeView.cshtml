﻿@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@

@using Microsoft.AspNetCore.Identity
@using System.Security.Claims

@model Application.DTOs.Exam.ExamTakeDTO

@{
	ViewData["Title"] = "Vào thi - " + Model.Title;
	var userId = User.FindFirstValue(ClaimTypes.NameIdentifier);
}

<style>
	.dropzone {
		display: inline-block;
		width: 250px;
		height: 40px;
		border: 2px dashed #aaa;
		border-radius: 6px;
		margin: 0 5px;
		vertical-align: middle;
		text-align: center;
		line-height: 40px;
		background-color: #f9f9f9;
	}

	.drag-item {
		display: inline-block;
		padding: 8px 12px;
		background-color: #D13D76;
		color: white;
		border-radius: 6px;
		margin: 5px;
		cursor: grab;
	}

		.drag-item.dragging {
			opacity: 0.5;
		}

	.dropzone.over {
		border-color: #007bff;
		background-color: #e8f0ff;
	}

	.dropzone-wrapper {
		display: inline-block;
		position: relative;
		min-width: 150px;
		padding: 5px;
	}

	.fixed-answer {
		display: inline-block;
		min-width: 100px;
		padding: 5px;
		background-color: #f0f0f0;
		border: 1px solid #ccc;
		border-radius: 6px;
		text-align: center;
		color: black;
		padding: 8px 12px;
	}

	.remove-btn {
		display: none;
		position: absolute;
		right: -15px;
		top: 10px;
		cursor: pointer;
		color: red;
		font-weight: bold;
	}

	.dropzone-wrapper.filled .remove-btn {
		display: inline;
	}

	.drag-item.disabled {
		opacity: 0.5;
		pointer-events: none;
	}
</style>

@section Styles {
	<link rel="stylesheet" href="~/css/exam-take.css" />
}
<div style="min-height: 60vh;">
	<form method="post" asp-controller="Exam" asp-action="SubmitExam" id="examForm" data-userid="@userId"
		  data-totalseconds="@Model.TotalTime.TotalSeconds">
		@Html.AntiForgeryToken()
		<input type="hidden" name="ExamId" value="@Model.Id" />
		<input type="hidden" name="ExamScoredId" value="@Model.ExanScoredId" />

		<div class="container mt-4">
			<h2 class="text-center mb-4">@Model.Title</h2>
			<div class="row">
				<!-- Sidebar -->
				<div class="col-md-3 py-3 rounded rounded-5" style="background-color: white; box-shadow: 0 0 10px rgba(0,0,0,0.1);">

					<div id="countdown" class="text-center">
						⏳ Thời gian còn lại: <span id="time">--:--</span>
					</div>

					<div class="nav-grid">
						@for (int i = 0; i < Model.Questions.Count; i++)
						{
							<button type="button" class="btn question-nav-btn"
									data-question-index="@i">
								@(@i + 1)
							</button>
						}
					</div>
				</div>

				<!-- Main content -->
				<div class="col-md-9 rounded rounded-5" style="padding-left: 60px;  display: flex; justify-content: center; align-items: center;">
					@for (int i = 0; i < Model.Questions.Count; i++)
					{
						var question = Model.Questions[i];


						<div class="question-box card-question" id="question-@i" style="display: @(i == 0 ? "block" : "none"); padding-top: 20px;width:100%;">
							<p><strong>@("Câu " + (i + 1) + ": ")</strong>@Html.Raw(question.Content)</p>
							@if (question.QuestionTypeId == 1)
							{
								@foreach (var answer in question.ShuffledRightAnswers)
								{
									<div class="form-check">
										<label class="form-check-label d-block w-100" for="answer_@answer.Id" style="cursor: pointer">
											<input class="form-check-input" type="radio"
												   name="Answers[@i].AnswerId"
												   id="answer_@answer.Id"
												   value="@answer.Id" />
											@answer.AnswerText
										</label>
									</div>
								}
							}
							else if (question.QuestionTypeId == 2)
							{
								<input class="form-control" type="text" style="max-width: 400px"
									   name="Answers[@i].UserInput"
									   placeholder="Đáp án của bạn là" />
							}
							else
							{
								var groupedAnswers = question.Answers
								.Where(a => !string.IsNullOrEmpty(a.MatchingPairKey))
								.GroupBy(a => a.MatchingPairKey!)
								.OrderBy(g => g.Key)
								.ToList();

								<div style="margin-bottom: 20px">
									@for (int j = 0; j < groupedAnswers.Count; j++)
									{
										var group = groupedAnswers[j].ToList();
										var left = group.First();
										<p>
											<span class="fixed-answer">@left.AnswerText</span>
											với
											<span class="dropzone-wrapper">
												<span class="dropzone"
													  data-blank-id="@left.MatchingPairKey"
													  ondrop="drop(event)"
													  ondragover="allowDrop(event)">
												</span>
												<span class="remove-btn" onclick="removeAnswer(this)">✕</span>
											</span>
										</p>
									}
								</div>

								<div class="draggables">
									@foreach (var answer in question.ShuffledRightAnswers)
									{
										<div class="drag-item"
											 id="drag-@answer.Id"
											 draggable="true"
											 data-answer-id="@answer.Id"
											 ondragstart="drag(event)">
											@answer.AnswerText
										</div>
									}
								</div>

								<input type="hidden" name="Answers[@i].MatchingPairsJson" id="dragAnswers-@i" />
							}
							<div class="d-flex justify-content-between mt-4">
								@if (i > 0)
								{
									<button type="button" class="btn btn-outline-secondary px-4"
											onclick="showQuestion(@(i - 1))">
										⬅ Câu trước
									</button>
								}
								else
								{
									<span></span>
								}

								@if (i < Model.Questions.Count - 1)
								{
									<button type="button" class="btn btn-outline-primary px-4"
											onclick="showQuestion(@(i + 1))">
										Câu tiếp ➡
									</button>
								}
							</div>
							<input type="hidden" name="Answers[@i].QuestionId" value="@question.Id" />
						</div>
					}

				</div>
			</div>

			<button type="submit" id="submitBtn" class="btn btn-primary d-block mx-auto mt-4" style="width: max-content">Nộp bài</button>
		</div>
	</form>
</div>


<!-- Hết giờ Modal -->
<div id="timeoutModal" class="modal-overlay" style="display: none;">
	<div class="modal-content">
		<h4>⏰ Hết giờ làm bài</h4>
		<p>Bài thi của bạn đã hết giờ. Hệ thống sẽ tự động nộp bài ngay bây giờ.</p>
		<button class="btn btn-dark" onclick="confirmAutoSubmit()">OK</button>
	</div>
</div>

@section Scripts {
	<script>
		const isNewExam = @(Model.ExanScoredId == null || Model.ExanScoredId == 0 ? "true" : "false");
		// const userId = "@User.FindFirstValue(ClaimTypes.NameIdentifier)";
		const userId = "@userId";
		const examId = "@Model.Id";

		if (isNewExam === "true" && localStorage.getItem("examStates")) {
			let data = JSON.parse(localStorage.getItem("examStates") || "{}");
			if (data[userId] && data[userId][examId]) {
				delete data[userId][examId];
				localStorage.setItem("examStates", JSON.stringify(data));
				console.log("🧹 Đã xoá dữ liệu cũ vì là bài thi mới");
			}
		}


		let localData = JSON.parse(localStorage.getItem("examStates") || "{}");
		function saveLocalState() {
			localStorage.setItem("examStates", JSON.stringify(localData));
		}

		window.addEventListener("DOMContentLoaded", () => {
			if (!userId || !examId) {
				console.error("Missing userId or examId.");
				return;
			}

			// ⏪ Khôi phục đáp án
			const savedAnswers = localData[userId]?.[examId]?.selectedAnswers || {};
			for (const name in savedAnswers) {
				const value = savedAnswers[name];
				const radio = document.querySelector(`input[name="${name}"][value="${value}"]`);
				if (radio) {
					radio.checked = true;
					const match = name.match(/Answers\[(\d+)\]/);
					if (match) {
						const index = parseInt(match[1]);
						const btn = document.querySelector(`.question-nav-btn[data-question-index="${index}"]`);
						if (btn) btn.classList.add("answered");
					}
				}
			}

			// ⏪ Khôi phục câu trả lời nhập tay
			const textAnswers = localData[userId]?.[examId]?.textAnswers || {};
			for (const name in textAnswers) {
				const input = document.querySelector(`input[name="${name}"]`);
				if (input) {
					input.value = textAnswers[name];

					// 🛠 Chỉ đánh dấu nếu giá trị không rỗng
					if (textAnswers[name].trim() !== "") {
						const match = name.match(/Answers\[(\d+)\]/);
						if (match) {
							const index = parseInt(match[1]);
							const btn = document.querySelector(`.question-nav-btn[data-question-index="${index}"]`);
							if (btn) btn.classList.add("answered");
						}
					}
				}
			}

			// ⏪ Khôi phục matching (drag & drop)
			const matchingAnswers = localData[userId]?.[examId]?.matchingAnswers || {};
			for (const qIndex in matchingAnswers) {
				const pairings = matchingAnswers[qIndex];
				if (!Array.isArray(pairings)) continue;

				pairings.forEach(pair => {
					const blankId = pair.MatchingBlankKey;
					const answerId = pair.AnswerId;

					const questionBox = document.getElementById(`question-${qIndex}`);
					if (!questionBox) return;

					const zone = questionBox.querySelector(`.dropzone[data-blank-id="${blankId}"]`);
					const answerText = Array.from(questionBox.querySelectorAll('.drag-item'))
						.find(item => item.getAttribute('data-answer-id') == answerId)?.textContent;

					if (zone && answerText) {
						zone.textContent = answerText;
						zone.setAttribute('data-answer-id', answerId);
						zone.parentElement.classList.add("filled");

						const dragElem = questionBox.querySelector(`#drag-${answerId}`);
						if (dragElem) {
							dragElem.classList.add("disabled");
						}
					}
				});

				// ✅ Đánh dấu câu hỏi đã làm
				const btn = document.querySelector(`.question-nav-btn[data-question-index="${qIndex}"]`);
				if (btn && pairings.length > 0) {
					btn.classList.add("answered");
				}
				updateJson(qIndex);
			}

			// ⏱️ Đếm ngược
			const formEl = document.getElementById("examForm");
			const totalTimeAttr = parseInt(formEl.dataset.totalSeconds || "0");


			// let totalTime = totalTimeAttr;
			let totalTime;
			const savedTime = localData[userId]?.[examId]?.timeRemaining;
			const lastUpdated = localData[userId]?.[examId]?.lastUpdated;

			if (savedTime !== undefined && lastUpdated !== undefined) {
				const now = Date.now();
				const secondsElapsed = Math.floor((now - lastUpdated) / 1000);
				totalTime = savedTime - secondsElapsed;
			} else {
				totalTime = @(Model.TotalTime.TotalSeconds);
			}

			const countdownEl = document.getElementById("time");
			const submitBtn = document.getElementById("submitBtn");


			function autoSubmitExam() {
				document.getElementById("timeoutModal").style.display = "flex";

				// Xóa dữ liệu để tránh khôi phục sau khi refresh
				if (localData[userId] && localData[userId][examId]) {
					delete localData[userId][examId];
					saveLocalState();
					console.log("🧹 Đã xoá localStorage khi hết giờ");
				}
			}

			window.confirmAutoSubmit = function () {
				document.getElementById("timeoutModal").style.display = "none";
				actuallySubmitExam();
			};

			window.actuallySubmitExam = function () {
				const form = document.getElementById("examForm");
				const formData = new FormData(form);
				const token = document.querySelector('input[name="__RequestVerificationToken"]').value;

				fetch(form.action, {
					method: 'POST',
					headers: {
						'X-Requested-With': 'XMLHttpRequest'
					},
					body: new URLSearchParams(formData)
				})
					.then(response => response.json())
					.then(data => {
						if (localData[userId]) {
							delete localData[userId];
							saveLocalState();
						}
						if (data.success) {
							const postForm = document.createElement("form");
							postForm.method = "POST";
							postForm.action = "/Exam/SubmitExamResult";

							const inputs = [
								["__RequestVerificationToken", token],
								["examScoredId", data.examScoredId],
								["examId", data.examId]
							];

							inputs.forEach(([name, value]) => {
								const input = document.createElement("input");
								input.type = "hidden";
								input.name = name;
								input.value = value;
								postForm.appendChild(input);
							});

							document.body.appendChild(postForm);
							postForm.submit();
						} else {
							const errorParam = encodeURIComponent(data.error);
							window.location.href = `/Exam/SubmitExamResult?error=${errorParam}`;
						}
					})
					.catch(err => {
						console.error("Submit error:", err);
						alert("Gửi bài không thành công. Vui lòng kiểm tra kết nối.");
					});
			};

			function updateCountdown() {
				if (totalTime < 0) {
					clearInterval(timerInterval);
					countdownEl.innerText = "0:00";
					submitBtn.disabled = true;
					autoSubmitExam();
					return;
				}

				const minutes = Math.floor(totalTime / 60);
				const seconds = totalTime % 60;
				countdownEl.innerText = `${minutes}:${seconds.toString().padStart(2, '0')}`;

				const now = Date.now();
				if (!localData[userId]) localData[userId] = {};
				if (!localData[userId][examId]) localData[userId][examId] = {};
				localData[userId][examId]["timeRemaining"] = totalTime;
				localData[userId][examId]["lastUpdated"] = now;
				saveLocalState();

				totalTime--;
			}

			if (totalTime <= 0) {
				autoSubmitExam();
				return;
			}

			updateCountdown();
			const timerInterval = setInterval(updateCountdown, 1000);

			if (totalTime <= 600) {
				const countdownBox = document.getElementById("countdown");
				countdownBox.style.backgroundColor = "#FFF1F0";
				countdownBox.style.borderColor = "#ff4d4f";
				countdownBox.style.color = "#c41d7f";
				countdownBox.style.boxShadow = "0 0 12px rgba(255, 77, 79, 0.3)";
			}

			// ⏭️ Hiển thị câu hỏi & lưu thời gian từng câu
			let currentQuestionIndex = 0;
			window.showQuestion = function (index) {
				const now = Date.now();
				if (!localData[userId]) localData[userId] = {};
				if (!localData[userId][examId]) localData[userId][examId] = {};
				if (!localData[userId][examId]["timePerQuestion"]) localData[userId][examId]["timePerQuestion"] = {};

				const lastSwitch = localData[userId][examId]["lastSwitch"] || now;
				const elapsed = Math.floor((now - lastSwitch) / 1000);
				const currentKey = `q${currentQuestionIndex}`;
				localData[userId][examId]["timePerQuestion"][currentKey] =
					(localData[userId][examId]["timePerQuestion"][currentKey] || 0) + elapsed;

				localData[userId][examId]["lastSwitch"] = now;
				currentQuestionIndex = index;
				saveLocalState();

				document.querySelectorAll('.question-box').forEach(box => {
					box.style.display = 'none';
					box.style.opacity = 0;
				});
				const next = document.getElementById(`question-${index}`);
				if (!next) return;
				next.style.display = 'block';
				setTimeout(() => {
					next.style.opacity = 1;
				}, 100);
			};

			// 🔁 Gán sự kiện chuyển câu hỏi
			document.querySelectorAll('.question-nav-btn').forEach(btn => {
				btn.addEventListener('click', () => {
					const index = parseInt(btn.dataset.questionIndex);
					window.showQuestion(index);
				});
			});

			// 🟢 Ghi nhận đáp án khi chọn
			document.querySelectorAll('input[type="radio"]').forEach(radio => {
				radio.addEventListener('change', function () {
					const name = this.name;
					const match = name.match(/Answers\[(\d+)\]/);
					if (match) {
						const index = parseInt(match[1]);
						const btn = document.querySelector(`.question-nav-btn[data-question-index="${index}"]`);
						if (btn) btn.classList.add("answered");
					}

					if (!localData[userId]) localData[userId] = {};
					if (!localData[userId][examId]) localData[userId][examId] = {};
					if (!localData[userId][examId]["selectedAnswers"]) localData[userId][examId]["selectedAnswers"] = {};
					localData[userId][examId]["selectedAnswers"][name] = this.value;
					saveLocalState();
				});
			});

			// 📝 Cảnh báo khi còn câu chưa làm
			document.getElementById("examForm").addEventListener("submit", function (e) {
				const unanswered = [];

				document.querySelectorAll('.question-box').forEach((box, index) => {
					let answered = false;

					// ✅ Trắc nghiệm (radio)
					if (box.querySelector('input[type="radio"]')) {
						if (box.querySelector('input[type="radio"]:checked')) {
							answered = true;
						}
					}

					// ✅ Fill in the blank (text)
					if (!answered && box.querySelector('input[type="text"][name^="Answers"]')) {
						const input = box.querySelector('input[type="text"][name^="Answers"]');
						if (input && input.value.trim() !== "") {
							answered = true;
						}
					}

					// ✅ Matching (drag & drop)
					if (!answered && box.querySelector('.dropzone')) {
						const dropzones = box.querySelectorAll('.dropzone');
						const allFilled = Array.from(dropzones).every(zone => zone.getAttribute('data-answer-id'));
						if (allFilled && dropzones.length > 0) {
							answered = true;
						}
					}

					if (!answered) {
						unanswered.push(index + 1);
					}
				});

				if (unanswered.length > 0) {
					const confirmText = `⚠️ Bạn chưa trả lời các câu: ${unanswered.join(', ')}.\nBạn vẫn muốn nộp bài?`;
					if (!confirm(confirmText)) {
						e.preventDefault();
						return;
					}
				}

				if (localData[userId]) {
					clearInterval(timerInterval);
					delete localData[userId];
					saveLocalState();
				}
			});

		});


		let draggedItem = null;

		document.querySelectorAll('.drag-item').forEach(item => {
			item.addEventListener('dragstart', (e) => {
				draggedItem = item;
				item.classList.add('dragging');
			});

			item.addEventListener('dragend', () => {
				draggedItem = null;
				document.querySelectorAll('.dropzone').forEach(zone => zone.classList.remove('over'));
				document.querySelectorAll('.drag-item').forEach(it => it.classList.remove('dragging'));
			});
		});

		document.querySelectorAll('.dropzone').forEach(zone => {
			zone.addEventListener('dragover', (e) => {
				e.preventDefault();
				zone.classList.add('over');
			});

			zone.addEventListener('dragleave', () => {
				zone.classList.remove('over');
			});

			zone.addEventListener('drop', (e) => {
				e.preventDefault();
				if (draggedItem) {
					zone.textContent = draggedItem.textContent;
					zone.setAttribute('data-answer-id', draggedItem.getAttribute('data-answer-id'));
					zone.classList.remove('over');
					const questionBox = zone.closest('.question-box');
					const qIndex = questionBox.id.split("-")[1];
					updateJson(qIndex);
				}
			});
		});

		// Ghi nhận đáp án nhập tay (Fill in the Blank)
		document.querySelectorAll('input[type="text"][name^="Answers"]').forEach(input => {
			input.addEventListener('input', function () {
				// markQuestionAnswered(this.name);

				const name = this.name;
				if (!localData[userId]) localData[userId] = {};
				if (!localData[userId][examId]) localData[userId][examId] = {};
				if (!localData[userId][examId]["textAnswers"]) localData[userId][examId]["textAnswers"] = {};
				localData[userId][examId]["textAnswers"][name] = this.value;
				saveLocalState();

				updateQuestionAnsweredStatus();
			});
		});

		function allowDrop(ev) {
			ev.preventDefault();
		}

		function drag(ev) {
			ev.dataTransfer.setData("text", ev.target.id);
		}

		function drop(ev) {
			ev.preventDefault();
			var dragId = ev.dataTransfer.getData("text");
			var draggedElem = document.getElementById(dragId);
			var dropzone = ev.target.closest(".dropzone");

			// Không cho phép thả vào dropzone đã có nội dung
			if (dropzone.innerText.trim() !== "") return;

			var answerText = draggedElem.innerText;
			var answerId = draggedElem.getAttribute("data-answer-id");
			var matchingKey = dropzone.getAttribute("data-blank-id"); // Lấy key bên trái (A, B, C...)

			// Gán nội dung hiển thị
			dropzone.innerText = answerText;
			dropzone.setAttribute("data-answer-id", answerId);
			dropzone.setAttribute("data-matching-key", matchingKey);
			dropzone.parentElement.classList.add("filled");
			draggedElem.classList.add("disabled");

			// 🔍 Tìm input ẩn tương ứng với câu hỏi này
			var questionBox = dropzone.closest(".question-box");
			var answerInput = questionBox.querySelector("input[name*='AnswerId']");
			var keyInput = questionBox.querySelector("input[name*='MatchingBlankKey']");

			// 📝 Gán value vào input để submit về backend
			if (answerInput && keyInput) {
				answerInput.value = answerId;
				keyInput.value = matchingKey;
			}
			const qIndex = questionBox.id.split("-")[1];
			updateJson(qIndex); // Cập nhật JSON ẩn
		}

		function removeAnswer(btn) {
			const wrapper = btn.parentElement;
			const dropzone = wrapper.querySelector('.dropzone');
			const answerId = dropzone.getAttribute("data-answer-id");
			const blankId = dropzone.getAttribute("data-blank-id");

			if (!answerId || !blankId) return;

			// Xóa nội dung dropzone
			dropzone.innerText = "";
			dropzone.removeAttribute("data-answer-id");
			wrapper.classList.remove("filled");

			// Enable lại drag-item
			var dragElem = document.getElementById("drag-" + answerId);
			if (dragElem) {
				dragElem.classList.remove("disabled");
			}

			// ✅ Cập nhật localStorage đúng blankId
			if (!localData[userId]) localData[userId] = {};
			if (!localData[userId][examId]) localData[userId][examId] = {};
			if (!localData[userId][examId]["matchingAnswers"]) localData[userId][examId]["matchingAnswers"] = {};

			const currentIndex = wrapper.closest('.question-box').id.split("-")[1];

			const answers = localData[userId][examId]["matchingAnswers"][currentIndex] || {};
			delete answers[blankId];

			// Nếu không còn cặp nào => xoá toàn bộ
			if (Object.keys(answers).length === 0) {
				delete localData[userId][examId]["matchingAnswers"][currentIndex];
			} else {
				localData[userId][examId]["matchingAnswers"][currentIndex] = answers;
			}

			saveLocalState();

			// ✅ Cập nhật lại JSON ẩn
			const qIndex = wrapper.closest('.question-box').id.split("-")[1];
			updateJson(qIndex);

			// ✅ Cập nhật trạng thái nút câu hỏi
			updateQuestionAnsweredStatus();
		}

		function updateJson(qIndex = null) {
			let questionBox;
			if (qIndex !== null) {
				questionBox = document.getElementById(`question-${qIndex}`);
			} else {
				questionBox = document.querySelector('.question-box:not([style*="display: none"])');
			}
			if (!questionBox) return;

			const zones = questionBox.querySelectorAll('.dropzone');
			const result = [];

			zones.forEach((dz) => {
				const blankId = dz.getAttribute('data-blank-id');
				const answerId = dz.getAttribute('data-answer-id');
				if (blankId && answerId) {
					result.push({
						AnswerId: parseInt(answerId),
						MatchingBlankKey: blankId
					});
				}
			});

			const currentIndex = qIndex ?? questionBox.id.split("-")[1];
			const hiddenInput = document.getElementById(`dragAnswers-${currentIndex}`);
			if (hiddenInput) {
				hiddenInput.value = JSON.stringify(result);
			}

			// Lưu vào localData
			if (!localData[userId]) localData[userId] = {};
			if (!localData[userId][examId]) localData[userId][examId] = {};
			if (!localData[userId][examId]["matchingAnswers"]) localData[userId][examId]["matchingAnswers"] = {};
			localData[userId][examId]["matchingAnswers"][currentIndex] = result;
			saveLocalState();

			// Đánh dấu đã làm
			const btn = document.querySelector(`.question-nav-btn[data-question-index="${currentIndex}"]`);
			if (btn) {
				btn.classList.add("answered");
			}

			// Cập nhật trạng thái câu hỏi đã trả lời
			updateQuestionAnsweredStatus();
		}

		function updateQuestionAnsweredStatus() {
			// Kiểm tra xem câu hỏi này có đáp án nào không
			const questionBox = document.querySelector('.question-box:not([style*="display: none"])');
			if (!questionBox) return;

			const radioButtons = questionBox.querySelectorAll('input[type="radio"]');
			const textInputs = questionBox.querySelectorAll('input[type="text"]');
			const dropzones = questionBox.querySelectorAll('.dropzone');

			let answered = false;

			// Kiểm tra radio buttons (Trắc nghiệm)
			if (Array.from(radioButtons).some(radio => radio.checked)) {
				answered = true;
			}

			// Kiểm tra câu trả lời nhập tay (Text input)
			if (!answered && Array.from(textInputs).some(input => input.value.trim() !== "")) {
				answered = true;
			}

			// Kiểm tra matching (drag & drop) – nếu có ít nhất một dropzone có đáp án
			if (!answered && Array.from(dropzones).some(zone => zone.getAttribute('data-answer-id'))) {
				answered = true;
			}

			// Cập nhật lại trạng thái câu hỏi trên navigation button
			const questionIndex = questionBox.id.split('-')[1]; // ID của câu hỏi: question-1, question-2, ...
			const btn = document.querySelector(`.question-nav-btn[data-question-index="${questionIndex}"]`);

			if (btn) {
				if (answered) {
					btn.classList.add("answered");
				} else {
					btn.classList.remove("answered");
				}
			}
		}
	</script>

	@* <script src="~/js/exam-take.js"></script>	 *@
}