@model List<Domain.Entities.BankQuestion>
@{
    var selectedIds = ViewData["SelectedIds"] as List<int> ?? new List<int>();
}
@{
    var totalPages = ViewBag.TotalPages as int? ?? 1;
    var currentPage = ViewBag.CurrentPage as int? ?? 1;
}

<!-- _SearchQuestionResults.cshtml -->
<style>
    body {
        background: linear-gradient(120deg, #F99FCF, #B2EDE3);
    }

    #questionTable {
        width: 100%;
        border-collapse: collapse;
        background-color: #FFFFFF;
        border-radius: 10px;
        overflow: hidden;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.05);
    }

        #questionTable thead {
            background: linear-gradient(90deg, #FAD3E7, #F0F8F6, #C4F0E0);
        }

        #questionTable th, #questionTable td {
            padding: 12px 16px;
            text-align: left;
            vertical-align: middle;
            border-bottom: 1px solid #E5E5E5;
        }

        #questionTable th {
            color: #121117;
            font-weight: bold;
        }

        #questionTable td {
            color: #121117;
            white-space: normal; /* 🟢 Giữ nguyên chiều cao nếu nội dung ít */
            word-break: break-word;
            line-height: 1.5;
        }

    .question-checkbox {
        width: 24px;
        height: 24px;
        cursor: pointer;
        accent-color: #D13D76;
    }

    .btn-info {
        background-color: #B2EDE3;
        border: none;
        color: #121117;
    }

        .btn-info:hover {
            background-color: #A0DBD1;
        }

    .btn-primary {
        background-color: #D13D76;
        border: none;
    }

        .btn-primary:hover {
            background-color: #b03067;
        }

    .pagination .page-item.active .page-link {
        background-color: #D13D76;
        border-color: #D13D76;
    }

    .pagination .page-link {
        color: #D13D76;
    }

    .modal-content {
        border-radius: 12px;
    }

    .modal-header {
        background-color: #FAD3E7;
        border-bottom: 1px solid #E5E5E5;
    }

    .modal-title {
        color: #D13D76;
    }

    .modal-footer .btn-secondary {
        background-color: #F99FCF;
        border: none;
        color: #121117;
    }

        .modal-footer .btn-secondary:hover {
            background-color: #f17ab8;
        }

    #answerList li {
        border: 1px solid #C4F0E0;
        background-color: #F0F8F6;
    }
    /* Xen kẽ màu hàng */
    #questionTable tbody tr:nth-child(even) {
        background-color: #F8FAFA; /* Màu xanh nhạt */
    }

    #questionTable tbody tr:nth-child(odd) {
        background-color: #FFFFFF;
    }

    /* Hiệu ứng hover cho từng câu hỏi */
    #questionTable tbody tr:hover {
        background-color: #D8F8F2 !important;
        cursor: pointer;
        transition: background-color 0.2s ease;
    }

    /* Làm đẹp ô trong từng dòng */
    #questionTable td {
        border-bottom: 1px solid #e1e1e1;
        padding: 14px 16px;
        border-radius: 8px;
        transition: background-color 0.2s;
    }

    /* Thêm đổ bóng nhẹ cho từng dòng */
    #questionTable tbody tr {
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.03);
        border-radius: 8px;
    }

    /* Checkbox lớn và màu phù hợp */
    .question-checkbox {
        width: 22px;
        height: 22px;
        accent-color: #D13D76;
        cursor: pointer;
    }
</style>


<table id="questionTable" >
    <thead>
        <tr>
            <th>Chọn</th>
            <th>Nội dung</th>
            <th>Loại câu hỏi</th>
            <th>Độ khó</th>
            <th>Chi tiết</th>
        </tr>

    </thead>

    <tbody>
        @foreach (var q in Model)
        {
            <tr class="question-row" data-id="@q.Id">

                <td>
                    <input type="checkbox" class="question-checkbox" value="@q.Id" @(selectedIds.Contains(q.Id) ? "checked" : "") />
                </td>
                <td>@q.Content</td>
                <td>@q.QuestionType?.Name</td>
                <td>@q.Level?.DisplayName</td>
                <td>
                    <div class="d-flex gap-1">
                        <button type="button" class="btn btn-info btn-sm btn-view-detail" data-id="@q.Id" title="Xem chi tiết">
                            <i class="fas fa-eye"></i>
                        </button>

                        <a href="/Exam/EditExamQuestion/@q.Id" class="btn btn-sm btn-primary" title="Chỉnh sửa">
                            <i class="fas fa-edit"></i>
                        </a>
                    </div>
                </td>


            </tr>
        }
    </tbody>

	
</table>



<div class="modal fade" id="questionDetailModal" tabindex="-1" aria-labelledby="questionDetailModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="questionDetailModalLabel">Chi tiết câu hỏi</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Đóng"></button>
            </div>
            <div class="modal-body">
                <h6 id="questionContent"></h6>
                <ul id="answerList" class="list-group mt-3"></ul>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Đóng</button>
            </div>
        </div>
    </div>
</div>


<div class="mt-4 d-flex justify-content-center">
    <nav aria-label="Page navigation">
        <ul class="pagination">
            @for (int i = 1; i <= (int)ViewData["TotalPages"]; i++)
            {
                var current = (int)ViewData["CurrentPage"];
                <li class="page-item @(i == current ? "active" : "")">
                    <a href="#" class="page-link pagination-link" data-page="@i">@i</a>
                </li>
            }
        </ul>
    </nav>

</div>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<!-- Nếu chưa có Bootstrap JS -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>





<script>
       

    $(function(){
        $('.btn-view-detail').click(function(){
            var questionId = $(this).data('id');

            $.ajax({
                url: '@Url.Action("GetQuestionDetail", "Exam")', // Controller + Action đúng của bạn
                data: { id: questionId },
                type: 'GET',
                  success: function(detail){
        console.log(detail);
        if(detail && detail.answers && Array.isArray(detail.answers)) {
            $('#questionContent').text(detail.content);  // sửa thành content
            var answersHtml = '';
            detail.answers.forEach(function(a){
                var correctMark = a.isCorrected ? '✔️' : '';  // lưu ý isCorrected hay iscorrected, đúng tên trường
                answersHtml += '<li class="list-group-item">' + a.answerText + ' ' + correctMark + '</li>';
            });
            $('#answerList').html(answersHtml);
            var modal = new bootstrap.Modal(document.getElementById('questionDetailModal'));
            modal.show();
        } else {
            alert('Không tìm thấy chi tiết câu hỏi hoặc câu trả lời!');
        }
    },

                error: function(){
                    alert('Lỗi khi lấy chi tiết câu hỏi!');
                }
            });
        });
    });
</script>


<script>
       
        function loadPage(page) {
        currentPage = page;

        const questionTypeId = $('#QuestionTypeId').val();
        const levelId = $('#LevelId').val();
        const isPublic = $('#IsPublic').val();
        const keyword = $('#Keyword').val();

        $.ajax({
            url: '@Url.Action("SearchQuestions", "Exam")',
            data: {
                questionTypeId,
                levelId,
                isPublic,
                keyword,
                page
            },
            success: function (data) {
                $('#questionListContainer').html(data);
                markSelectedCheckboxes(); // ✅ Đảm bảo chạy lại
            },
            error: function () {
                alert("Không thể tải dữ liệu.");
            }
        });
    }

              function markSelectedCheckboxes() {
        $('.question-checkbox').each(function () {
            const id = parseInt($(this).val());
            $(this).prop('checked', selectedQuestionIds.includes(id));
        });
    }


        function reloadQuestionTable() {
        loadQuestions(currentPage); // hoặc truyền page hiện tại đang đứng
    }

        
    

</script>

<script>
        function chonCauHoiNgauNhien() {
        const max = parseInt($('#randomCount').val());
        if (isNaN(max) || max <= 0) {
            alert("Vui lòng chọn số lượng hợp lệ.");
            return;
        }

        // Lấy filter của câu hỏi
        const questionTypeId = $('#questionTypeFilter').val() || null;
        const levelId = $('#levelFilter').val() || null;
        const keyword = $('#keywordFilter').val().trim() || null;

        $.ajax({
            url: '/Exam/GetRandomQuestionIds',
            type: 'GET',
            data: {
                count: max,
                questionTypeId,
                levelId,
                keyword
            },
            success: function (ids) {
                selectedQuestionIds = ids;
                reloadQuestionTable();
                $('#questionCountWarning').hide();
            },
            error: function () {
                alert("Lỗi khi chọn ngẫu nhiên câu hỏi.");
            }
        });
    }

</script>


<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" />
