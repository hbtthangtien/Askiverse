@using Application.DTOs.Exam
@using Domain.Entities
@model EditExamDTO

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />

<div class="container mt-5 mb-4">
	<h1 class="mb-4">Chỉnh sửa đề thi </h1>
<form asp-action="Edit" asp-controller="Exam" method="post" id="editExamForm">
    @Html.AntiForgeryToken()

    <input type="hidden" asp-for="Id" /> <!-- Hidden để biết đang sửa đề nào -->

    <div class="mb-3">
        <label asp-for="Title" class="form-label">Tiêu đề</label>
        <input asp-for="Title" class="form-control" />
    </div>

    <div class="mb-3">
        <label asp-for="Description" class="form-label">Mô tả</label>
        <textarea asp-for="Description" class="form-control" rows="3"></textarea>
    </div>

        <div class="mb-3">
            <label asp-for="SourceText" class="form-label">Nguồn đề (Source Text)</label>

            <select id="sourceTextSelect" class="form-select">
                <option value="" disabled>-- Chọn nguồn đề --</option>
                <option value="Sách giáo khoa">Sách giáo khoa</option>
                <option value="Đề kiểm tra">Đề kiểm tra</option>
                <option value="Tài liệu tham khảo">Tài liệu tham khảo</option>
                <option value="Tự biên soạn">Tự biên soạn</option>
                <option value="Khác">Khác...</option>
            </select>

            <input asp-for="SourceText" class="form-control mt-2" id="customSourceText" placeholder="Nhập nguồn đề khác..." style="display: none;" />
        </div>


    <div class="mb-3">
        <label asp-for="SubjectId" class="form-label">Môn học</label>
        <select asp-for="SubjectId" asp-items="@(new SelectList(ViewBag.Subjects, "Id", "Name"))" class="form-select">
            <option value="">-- Chọn môn học --</option>
        </select>
    </div>
        <div class="mb-3">
            <label asp-for="TotalTime" class="form-label">Thời gian làm bài (phút)</label>
            <select asp-for="TotalTime" class="form-select">
                <option value="">-- Chọn thời gian --</option>
                <option value="15">15 phút</option>
                <option value="30">30 phút</option>
                <option value="45">45 phút</option>
                <option value="50">50 phút</option>
                <option value="60">60 phút</option>
                <option value="90">90 phút</option>
            </select>
        </div>

        <div class="mb-3">
            <label asp-for="IsPublic" class="form-label">Trạng thái</label>
            <select asp-for="IsPublic" class="form-select">
                <option value="true">Công khai</option>
                <option value="false">Riêng tư</option>
            </select>
        </div>

    <div style="margin-bottom: 10px;">
        <label for="randomCount">Chọn số lượng câu hỏi: </label>
        <select id="randomCount" class="form-select" style="width: 200px; display: inline-block;">
            <option value="10">10 câu</option>
            <option value="25">25 câu</option>
            <option value="50">50 câu</option>
        </select>
        <button type="button" class="btn btn-primary btn-sm ms-2" onclick="chonCauHoiNgauNhien()">Chọn ngẫu nhiên</button>
    </div>
        <div class="mb-3">
            <button type="button" class="btn btn-info btn-sm mt-2" onclick="showSelectedQuestionsModal()">Xem câu hỏi đã chọn</button>
            <p id="selectedQuestionCount"
               class="mt-2 fw-bold text-primary text-begin"
               style="font-size: 1rem;">
            </p>
        </div>
    <input type="hidden" id="SelectedQuestionIds" name="SelectedQuestionIds" />
        <input type="hidden" asp-for="TotalTime" id="totalTimeHidden" />
        <input type="hidden" asp-for="TotalQuestion" id="totalQuestionHidden" />

       

    <div id="questionCountWarning" class="text-danger mt-1 mb-3" style="display:none;"></div>

   
    <!-- Khung lớn chứa danh sách câu hỏi bên trái + phần lọc bên phải -->
    <div class="border rounded p-3">
        <h4 class="mb-3">Quản lý câu hỏi</h4>

        <div class="row">
            <!-- Danh sách câu hỏi (bên trái, rộng 8 cột) -->
            <div class="col-md-8" style="height: 400px; overflow-y: auto; border: 1px solid #ccc; padding: 10px; border-radius: 4px;">
                <div id="searchResults">

                    <div id="questionListContainer">
                        @{
                            var questions = ViewBag.InitialQuestions as List<BankQuestion>;

                            var partialViewData = new ViewDataDictionary<List<BankQuestion>>(
                            metadataProvider: ViewContext.HttpContext.RequestServices
                            .GetService(typeof(Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider))
                            as Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider,
                            modelState: new Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary()
                            )
            {
                Model = questions
            };

                            partialViewData["SelectedIds"] = Model.SelectedQuestionIds;
                            partialViewData["TotalPages"] = ViewBag.TotalPages ?? 1;
                            partialViewData["CurrentPage"] = ViewBag.CurrentPage ?? 1;
                        }

                        @Html.Partial("_SearchQuestionResults", partialViewData.Model, partialViewData)
                    </div>
                </div>
            </div>

            <!-- Phần lọc câu hỏi (bên phải, rộng 4 cột) -->
            <div class="col-md-4">
                <h5>Lọc câu hỏi</h5>

                <div class="mb-3">
                    <label for="questionTypeFilter" class="form-label">Loại câu hỏi</label>
                    <select id="questionTypeFilter" class="form-select">
                        <option value="">Tất cả loại câu hỏi</option>
                        @foreach (var qt in ViewBag.QuestionTypes as List<QuestionType>)
                        {
                            <option value="@qt.Id">@qt.Name</option>
                        }
                    </select>
                </div>

                <div class="mb-3">
                    <label for="levelFilter" class="form-label">Độ khó</label>
                    <select id="levelFilter" class="form-select">
                        <option value="">Tất cả độ khó</option>
                        @foreach (var lv in ViewBag.Levels as List<Level>)
                        {
                            <option value="@lv.Id">@lv.DisplayName</option>
                        }
                    </select>
                </div>

                <div class="mb-3">
                    <input type="text" id="keywordFilter" placeholder="Nhập từ khóa..." class="form-control" />
                </div>

                <div class="mb-3">
                    <button type="button" id="btnSearch" class="btn btn-primary w-100">Tìm câu hỏi</button>
                </div>
            </div>
        </div>
    </div>

    <div class="mt-4">
        <input type="submit" value="Lưu thay đổi" class="btn btn-success" />
            <a href="/Exam/AllExams" class="btn btn-secondary">Hủy </a>
    </div>
    <input type="hidden" name="TotalQuestion" id="totalQuestionHidden" />
</form>
    <div class="modal fade" id="selectedQuestionsModal" tabindex="-1" aria-labelledby="selectedQuestionsModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="selectedQuestionsModalLabel">Danh sách câu hỏi đã chọn</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Đóng"></button>
                </div>
                <div class="modal-body" id="selectedQuestionsList">
                    <!-- JS sẽ gắn danh sách câu hỏi ở đây -->
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Đóng</button>
                </div>
            </div>
        </div>
    </div>
</div>
@section Scripts {
    <script>
        let selectedQuestionIds = @Html.Raw(Json.Serialize(Model.SelectedQuestionIds ?? new List<int>()));
        let currentPage = 1;
         let allSelectedQuestions = [];
        let currentModalPage = 1;
        const pageSize = 5;
        let selectedQuestionsData = [];
    </script>
    <script>
          function updateSelectedQuestionCount() {
            const maxQuestionLimit = parseInt($('#randomCount').val()) || 0;
            const selectedCount = selectedQuestionIds.length;
            $('#selectedQuestionCount').text(`Đã chọn ${selectedCount}/${maxQuestionLimit} câu hỏi.`);
        }
             function renderSelectedQuestionsPage(page) {
            currentModalPage = page;
             updateSelectedQuestionCount();
            const start = (page - 1) * pageSize;
            const end = start + pageSize;
            const items = selectedQuestionIds.slice(start, end);

            if (items.length === 0) {
                $('#selectedQuestionsList').html('<p>Không có câu hỏi nào được chọn.</p>');
                return;
            }

            let html = '<ul class="list-group">';
                   for (let i = 0; i < items.length; i++) {
            const id = items[i];
            const q = selectedQuestionsData.find(q => q.id === id);
            if (q) {
                const displayIndex = (page - 1) * pageSize + i + 1;
                html += `<li class="list-group-item">
                            <strong>Câu hỏi ${displayIndex}</strong><br/>
                            <strong>Nội dung:</strong> ${q.content}
                         </li>`;
            } else {
                html += `<li class="list-group-item">Câu hỏi ID: ${id} (không tìm thấy)</li>`;
            }
        }

            html += '</ul>';

            // Thêm phân trang
            const totalPages = Math.ceil(selectedQuestionIds.length / pageSize);
            html += `<nav class="mt-3"><ul class="pagination justify-content-center">`;
            for (let i = 1; i <= totalPages; i++) {
                html += `<li class="page-item ${i === page ? 'active' : ''}">
                            <a class="page-link" href="#" onclick="renderSelectedQuestionsPage(${i})">${i}</a>
                         </li>`;
            }
            html += `</ul></nav>`;

            $('#selectedQuestionsList').html(html);
        }


               function showSelectedQuestionsModal() {
            $.ajax({
                type: 'POST',
                url: '/Exam/GetSelectedQuestions',
                contentType: 'application/json',
                data: JSON.stringify(selectedQuestionIds),
                success: function (questions) {
                    selectedQuestionsData = questions;
                    renderSelectedQuestionsPage(1);
                    const modal = new bootstrap.Modal(document.getElementById('selectedQuestionsModal'));
                    modal.show();
                },
                error: function () {
                    alert("Không thể tải nội dung câu hỏi.");
                }
            });
        }
        $(document).ready(function () {
            $('#sourceTextSelect').change(function () {
                const selectedValue = $(this).val();
                if (selectedValue === 'Khác') {
                    $('#customSourceText').val('').show();
                } else {
                    $('#customSourceText').val(selectedValue).hide();
                }
            });
              updateSelectedQuestionCount();
        });
    </script>
        <script>


                function loadQuestions() {
                const filterData = $('#search-form').serialize(); // Nếu bạn có form lọc

                $.ajax({
                    url: '/Exam/SearchQuestions', // Hoặc endpoint nào bạn dùng
                    type: 'GET',
                    data: filterData,
                    success: function (res) {
                        $('#question-list-container').html(res); // ID của div chứa danh sách câu hỏi
                    },
                    error: function () {
                        toastr.error('Không thể tải lại danh sách câu hỏi');
                    }
                });
            }





             function loadQuestions(page = 1) {
                 var questionTypeId = $('#questionTypeFilter').val() || null;
                 var levelId = $('#levelFilter').val() || null;
                 var keyword = $('#keywordFilter').val().trim() || null;

                 $.ajax({
                     url: '@Url.Action("SearchQuestions", "Exam")',
                     data: {
                         questionTypeId: questionTypeId,
                         levelId: levelId,
                         keyword: keyword,
                         page: page
                     },
                     success: function (result) {
                         $('#searchResults').html(result);

                         // Đánh dấu lại checkbox cho các câu đã chọn
                         selectedQuestionIds.forEach(function (id) {
                             $('.question-checkbox[value="' + id + '"]').prop('checked', true);
                         });
                     }
                 });
             }

             $(document).on('change', '.question-checkbox', function () {
                 var questionId = parseInt($(this).val());
                 if ($(this).is(':checked')) {
                     if (!selectedQuestionIds.includes(questionId)) {
                         selectedQuestionIds.push(questionId);
                     }
                 } else {
                     selectedQuestionIds = selectedQuestionIds.filter(id => id !== questionId);
                 }
                   updateSelectedQuestionCount();
             });

             $(document).on('click', '.pagination a', function (e) {
                 e.preventDefault();
                 var page = $(this).data('page');
                 loadQuestions(page);
             });

             $('#btnSearch').click(function () {
                 loadQuestions(1);
             });

             $(document).ready(function () {
                 loadQuestions(1);
             });

            // Tìm kiếm câu hỏi
            $('#btnSearch').click(function () {
                var questionTypeId = $('#questionTypeFilter').val() || null;
                var levelId = $('#levelFilter').val() || null;
                var keyword = $('#keywordFilter').val().trim() || null;

                $.ajax({
                    url: '@Url.Action("SearchQuestions", "Exam")',
                    data: {
                        questionTypeId: questionTypeId,
                        levelId: levelId,
                        keyword: keyword
                    },
                    success: function (result) {
                        $('#searchResults').html(result);

                        // Đánh dấu lại checkbox cho các câu đã chọn
                        selectedQuestionIds.forEach(function (id) {
                            $('.question-checkbox[value="' + id + '"]').prop('checked', true);
                        });

                        updateSelectedQuestionCount();
                        if (typeof showPage === "function") {
                            showPage(1);
                        }
                    }
                });
            });
            



            // Hàm load dữ liệu theo trang
            function loadPage(page) {
                var questionTypeId = $('#questionTypeFilter').val() || null;
                var levelId = $('#levelFilter').val() || null;
                var keyword = $('#keywordFilter').val().trim() || null;

                $.ajax({
                    url: '@Url.Action("SearchQuestions", "Exam")',
                    data: {
                        questionTypeId: questionTypeId,
                        levelId: levelId,
                        keyword: keyword,
                        page: page,
                        pageSize: 10 // hoặc lấy từ ViewBag.PageSize nếu động
                    },
                    success: function (result) {
                        $('#searchResults').html(result);

                        // Đánh dấu lại checkbox cho các câu đã chọn
                        selectedQuestionIds.forEach(function (id) {
                            $('.question-checkbox[value="' + id + '"]').prop('checked', true);
                        });
                    }
                });
            }

            // Gán sự kiện click cho các nút phân trang (sau mỗi lần load lại kết quả)
            $(document).on('click', '.pagination-link', function (e) {
                e.preventDefault();
                var page = $(this).data('page');
                loadPage(page);
            });

            // Validate form trước khi submit
                              $('#editExamForm').submit(function (e) {
            e.preventDefault(); // Ngăn submit mặc định

            const errors = [];

                   const title = $('input[name="Title"]').val().trim();
        const description = $('textarea[name="Description"]').val().trim();

        const selectedSource = $('#sourceTextSelect').val();
        let sourceText;
        if (selectedSource === "Khác") {
            sourceText = $('#customSourceText').val().trim();
        } else {
            sourceText = selectedSource;
        }
        $('input[name="SourceText"]').val(sourceText);  // gán lại vào input ẩn

        const subjectId = $('select[name="SubjectId"]').val();
        const totalQuestion = parseInt($('#randomCount').val());
        const totalTime = parseInt($('select[name="TotalTime"]').val());
        const selectedCount = selectedQuestionIds.length;


            // Gán giá trị vào input ẩn
            $('#totalTimeHidden').val(totalTime);
            $('#totalQuestionHidden').val(selectedCount);

            // Kiểm tra thông tin bắt buộc
            if (!title || !description || !sourceText || !subjectId || isNaN(totalTime)) {
                errors.push("Vui lòng điền đầy đủ các trường bắt buộc và chọn thời gian.");
            }

            // Kiểm tra số câu hỏi
            if (selectedCount !== totalQuestion) {
                const diff = totalQuestion - selectedCount;
                errors.push(diff > 0
                    ? `Bạn còn thiếu ${diff} câu hỏi.`
                    : `Bạn đã chọn thừa ${Math.abs(diff)} câu hỏi.`);
            }

            if (errors.length > 0) {
                Swal.fire({
                    icon: 'error',
                    title: 'Không thể lưu đề',
                    html: '<ul style="text-align:left;">' + errors.map(e => `<li>${e}</li>`).join('') + '</ul>'
                });
                return;
            }

            // Gỡ các input ẩn cũ (nếu có)
            $('input[name="SelectedQuestionIds"]').remove();

            // Gắn lại SelectedQuestionIds
            selectedQuestionIds.forEach(function (id) {
                $('<input>', {
                    type: 'hidden',
                    name: 'SelectedQuestionIds',
                    value: id
                }).appendTo('#editExamForm');
            });

            // Submit form thật
            this.submit();
        });


                       $(document).ready(function () {
            let errors = [];

        @if (TempData["Error"] != null)
        {
            <text>errors.push("@TempData["Error"]");</text>
        }

            if (errors.length > 0) {
                Swal.fire({
                    icon: 'error',
                    title: 'Lỗi khi cập nhật!',
                    html: '<ul style="text-align:left;">' + errors.map(e => `<li>${e}</li>`).join('') + '</ul>'
                });
            }

        @if (TempData["Success"] != null && TempData["RedirectOnSuccess"] != null)
        {
            <text>
                    Swal.fire({
                        icon: 'success',
                        title: '✅ @TempData["Success"]',
                        text: 'Bạn sẽ được chuyển về trang danh sách đề sau khi đóng.',
                        confirmButtonText: 'Xem danh sách đề',
                        backdrop: true
                    }).then((result) => {
                        if (result.isConfirmed) {
                            window.location.href = '/Exam/AllExams'; // ✅ Đổi thành trang bạn muốn
                        }
                    });
            </text>
        }
        });


                             $(document).ready(function () {
            const totalQuestion = @Model.TotalQuestion;
            const totalTime = @Model.TotalTime; // 👈 thêm dòng này

            // ✅ Chuyển Razor Model thành JS string an toàn
            const sourceText = @Html.Raw(Json.Serialize(Model.SourceText));
            const trimmedSourceText = sourceText.trim();

            const predefined = [
                "Sách giáo khoa",
                "Đề kiểm tra",
                "Tài liệu tham khảo",
                "Tự biên soạn"
            ];

            $('#randomCount').val(totalQuestion);
            $('#TotalTime').val(totalTime); // 👈 Gán đúng dropdown thời gian

            if (predefined.includes(trimmedSourceText)) {
                $('#sourceTextSelect').val(trimmedSourceText);
                $('#customSourceText').hide();
            } else {
                $('#sourceTextSelect').val("Khác");
                $('#customSourceText').val(trimmedSourceText).show();
            }

            // ✅ Gán lại SourceText chính xác trước khi submit
            $('#editExamForm').on('submit', function () {
                const selectedValue = $('#sourceTextSelect').val();
                if (selectedValue === "Khác") {
                    $('#customSourceText').val($('#customSourceText').val().trim());
                } else {
                    $('#customSourceText').val(selectedValue);
                }
            });
        });

        </script>

    <!-- SweetAlert2 CDN -->
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

}

<style>
    body {
        background: linear-gradient(120deg, #F99FCF, #B2EDE3);
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        color: #121117;
    }

    h1, h4, h5, label {
        color: #D13D76;
    }

    .container {
        background-color: #FFFFFF;
        border-radius: 20px;
        padding: 30px;
        box-shadow: 0 0 20px rgba(0, 0, 0, 0.1);
    }

    .form-control,
    .form-select {
        border-radius: 10px;
        border: 1px solid #ccc;
        transition: border 0.3s;
    }

        .form-control:focus,
        .form-select:focus {
            border-color: #FE9FC3;
            box-shadow: 0 0 0 0.2rem rgba(254, 159, 195, 0.25);
        }

    .btn-success {
        background-color: #D13D76;
        border-color: #D13D76;
    }

        .btn-success:hover {
            background-color: #a52d5c;
            border-color: #a52d5c;
        }

    .btn-primary {
        background-color: #FE9FC3;
        border-color: #FE9FC3;
        color: #121117;
    }

        .btn-primary:hover {
            background-color: #f97daf;
            border-color: #f97daf;
        }

    .form-check-input:checked {
        background-color: #D13D76;
        border-color: #D13D76;
    }

    #questionCountWarning {
        font-weight: bold;
    }

    .border {
        background-color: #D8F8F2;
        border-color: #C4F0E0 !important;
    }

    .pagination .page-link {
        color: #D13D76;
    }

    .pagination .active .page-link {
        background-color: #FE9FC3;
        border-color: #FE9FC3;
        color: #fff;
    }

    /* Navbar (nếu có navbar ở layout) */
    .navbar {
        background: linear-gradient(90deg, #FAD3E7, #F0F8F6, #C4F0E0);
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    }

    .navbar-brand,
    .navbar-nav .nav-link {
        color: #121117;
    }

        .navbar-brand:hover,
        .navbar-nav .nav-link:hover {
            color: #D13D76;
        }
</style>