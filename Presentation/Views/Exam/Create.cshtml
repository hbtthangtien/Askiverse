@using Application.DTOs.Exam
@using Domain.Entities
@model CreateExamDTO

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
<style>
    body {
        background: linear-gradient(120deg, #F99FCF, #B2EDE3);
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        color: #121117;
    }

    h1, h4, h5, label {
        color: #D13D76;
    }

    .container {
        background-color: #FFFFFF;
        border-radius: 20px;
        padding: 30px;
        box-shadow: 0 0 20px rgba(0, 0, 0, 0.1);
    }

    .form-control,
    .form-select {
        border-radius: 10px;
        border: 1px solid #ccc;
        transition: border 0.3s;
    }

        .form-control:focus,
        .form-select:focus {
            border-color: #FE9FC3;
            box-shadow: 0 0 0 0.2rem rgba(254, 159, 195, 0.25);
        }

    .btn-success {
        background-color: #D13D76;
        border-color: #D13D76;
    }

        .btn-success:hover {
            background-color: #a52d5c;
            border-color: #a52d5c;
        }

    .btn-primary {
        background-color: #FE9FC3;
        border-color: #FE9FC3;
        color: #121117;
    }

        .btn-primary:hover {
            background-color: #f97daf;
            border-color: #f97daf;
        }

    .form-check-input:checked {
        background-color: #D13D76;
        border-color: #D13D76;
    }

    #questionCountWarning {
        font-weight: bold;
    }

    .border {
        background-color: #D8F8F2;
        border-color: #C4F0E0 !important;
    }

    .pagination .page-link {
        color: #D13D76;
    }

    .pagination .active .page-link {
        background-color: #FE9FC3;
        border-color: #FE9FC3;
        color: #fff;
    }

    /* Navbar (nếu có navbar ở layout) */
    .navbar {
        background: linear-gradient(90deg, #FAD3E7, #F0F8F6, #C4F0E0);
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    }

    .navbar-brand,
    .navbar-nav .nav-link {
        color: #121117;
    }

        .navbar-brand:hover,
        .navbar-nav .nav-link:hover {
            color: #D13D76;
        }
</style>
<div class="container mt-5 mb-4">
    <h1 class="mb-4">Tạo đề thi mới</h1>
    <a class="btn btn-success mb-3" asp-controller="Exam" asp-action="CreateExamQuestion">
        ➕ Tạo câu hỏi mới
    </a>

    <!-- Form tạo đề ở trên -->
    <form asp-action="Create" method="post" id="createExamForm">
        <!-- Các trường ẩn để submit sau khi nhập thông tin -->
        <input type="hidden" name="Title" />
        <input type="hidden" name="Description" />
        <input type="hidden" name="SourceText" />
        <input type="hidden" name="SubjectId" />
        <input type="hidden" name="IsPublic" />
        <input type="hidden" name="TotalQuestion" id="totalQuestionHidden" />
        <input type="hidden" name="SelectedQuestionIds" id="SelectedQuestionIds" />
        <input type="hidden" name="TotalTime" id="totalTimeHidden" />
        <!-- Dropdown chọn số lượng -->
        <div class="mb-3">
            <label for="randomCount">Chọn số lượng câu hỏi:</label>
            <select id="randomCount" class="form-select" style="width: 200px; display: inline-block;">
                <option value="10">10 câu</option>
                <option value="25">25 câu</option>
                <option value="50">50 câu</option>
            </select>
            <button type="button" class="btn btn-primary btn-sm ms-2" onclick="chonCauHoiNgauNhien()">Chọn ngẫu nhiên</button>
        </div>
        <div id="questionCountWarning" class="text-danger mt-1 mb-3" style="display:none;"></div>
        <div class="mb-3">
        <button type="button" class="btn btn-info btn-sm mt-2" onclick="showSelectedQuestionsModal()">Xem câu hỏi đã chọn</button>
       </div>
        <!-- Khung lớn chứa danh sách câu hỏi bên trái + phần lọc bên phải -->
        <div class="border rounded p-3">
            <h4 class="mb-3">Quản lý câu hỏi</h4>
            <div class="row">
                <div class="col-md-8" style="height: 400px; overflow-y: auto; border: 1px solid #ccc; padding: 10px; border-radius: 4px;">
                    <div id="searchResults">
                        <div id="questionListContainer">
                            @{
                                var questions = ViewBag.InitialQuestions as List<BankQuestion>;
                                var partialViewData = new ViewDataDictionary<List<BankQuestion>>(
                                metadataProvider: ViewContext.HttpContext.RequestServices.GetService(typeof(Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider)) as Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider,
                                modelState: new Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary())
            {
                Model = questions
            };
                                partialViewData["SelectedIds"] = Model.SelectedQuestionIds;
                                partialViewData["TotalPages"] = ViewBag.TotalPages ?? 1;
                                partialViewData["CurrentPage"] = ViewBag.CurrentPage ?? 1;
                            }
                            @Html.Partial("_SearchQuestionResults", partialViewData.Model, partialViewData)
                        </div>
                    </div>
                </div>
                <div class="col-md-4">
                    <h5>Lọc câu hỏi</h5>
                    <div class="mb-3">
                        <label for="questionTypeFilter" class="form-label">Loại câu hỏi</label>
                        <select id="questionTypeFilter" class="form-select">
                            <option value="">Tất cả loại câu hỏi</option>
                            @foreach (var qt in ViewBag.QuestionTypes as List<QuestionType>)
                            {
                                <option value="@qt.Id">@qt.Name</option>
                            }
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="levelFilter" class="form-label">Độ khó</label>
                        <select id="levelFilter" class="form-select">
                            <option value="">Tất cả độ khó</option>
                            @foreach (var lv in ViewBag.Levels as List<Level>)
                            {
                                <option value="@lv.Id">@lv.DisplayName</option>
                            }
                        </select>
                    </div>
                    <div class="mb-3">
                        <input type="text" id="keywordFilter" placeholder="Nhập từ khóa..." class="form-control" />
                    </div>
                    <div class="mb-3">
                        <button type="button" id="btnSearch" class="btn btn-primary w-100">Tìm câu hỏi</button>
                    </div>
                </div>
            </div>
        </div>
		
        <!-- Nút lưu sẽ mở modal -->
        <div class="mt-4">
            <button type="button" class="btn btn-success" onclick="showExamInfoModal()">Lưu & Nhập thông tin đề</button>
        </div>
    </form>
    <!-- Nút mở modal -->

   

    <!-- Modal -->
    <div class="modal fade" id="selectedQuestionsModal" tabindex="-1" aria-labelledby="selectedQuestionsModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="selectedQuestionsModalLabel">Danh sách câu hỏi đã chọn</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Đóng"></button>
                </div>
                <div class="modal-body" id="selectedQuestionsList">
                    <!-- JS sẽ gắn danh sách câu hỏi ở đây -->
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Đóng</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal nhập thông tin đề -->
    <div class="modal fade" id="examInfoModal" tabindex="-1" aria-labelledby="examInfoModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="examInfoModalLabel">Nhập thông tin đề thi</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="modalTitle" class="form-label">Tiêu đề</label>
                        <input type="text" id="modalTitle" class="form-control" />
                    </div>
                    <div class="mb-3">
                        <label for="modalDescription" class="form-label">Mô tả</label>
                        <textarea id="modalDescription" class="form-control"></textarea>
                    </div>
                    <div class="mb-3">
                        <label asp-for="SourceText" class="form-label">Nguồn đề (Source Text)</label>

                        <select id="sourceTextSelect" class="form-select">
                            <option value="" selected disabled>-- Chọn nguồn đề --</option>
                            <option value="Sách giáo khoa">Sách giáo khoa</option>
                            <option value="Đề kiểm tra">Đề kiểm tra</option>
                            <option value="Tài liệu tham khảo">Tài liệu tham khảo</option>
                            <option value="Tự biên soạn">Tự biên soạn</option>
                            <option value="Khác">Khác...</option>
                        </select>

                        <input asp-for="SourceText" class="form-control mt-2" id="customSourceText" placeholder="Nhập nguồn đề khác..." style="display: none;" />
                    </div>
                    <div class="mb-3">
                        <label for="modalSubjectId" class="form-label">Môn học</label>
                        <select id="modalSubjectId" class="form-select">
                            <option value="">-- Chọn môn học --</option>
                            @foreach (var subject in ViewBag.Subjects as List<Subject>)
                            {
                                <option value="@subject.Id">@subject.Name</option>
                            }
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="totalTimeSelect" class="form-label">Thời gian làm bài (phút)</label>
                        <select id="totalTimeSelect" class="form-select">
                            <option value="" selected disabled>-- Chọn thời gian --</option>
                            <option value="15">15 phút</option>
                            <option value="30">30 phút</option>
                            <option value="45">45 phút</option>
                            <option value="50">50 phút</option>
                            <option value="60">60 phút</option>
                            <option value="90">90 phút</option>
                        </select>
				
                    </div>

                    <div class="mb-3">
                        <label for="modalIsPublic" class="form-label">Chế độ</label>
                        <select id="modalIsPublic" class="form-select">
                            <option value="true">Công khai</option>
                            <option value="false">Riêng tư</option>
                        </select>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Hủy</button>
                    <button type="button" class="btn btn-primary" onclick="submitFinalForm()">Tạo đề</button>
                </div>
            </div>
        </div>
    </div>
</div>


@section Scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <script>
        let selectedQuestionIds = [];
        let currentPage = 1;
                let allSelectedQuestions = [];
        let currentModalPage = 1;
        const pageSize = 5;
        let selectedQuestionsData = [];

    </script>
    <script>
                              function renderSelectedQuestionsPage(page) {
            currentModalPage = page;
            const start = (page - 1) * pageSize;
            const end = start + pageSize;
            const items = selectedQuestionIds.slice(start, end);

            if (items.length === 0) {
                $('#selectedQuestionsList').html('<p>Không có câu hỏi nào được chọn.</p>');
                return;
            }

            let html = '<ul class="list-group">';
                   for (let i = 0; i < items.length; i++) {
            const id = items[i];
            const q = selectedQuestionsData.find(q => q.id === id);
            if (q) {
                const displayIndex = (page - 1) * pageSize + i + 1;
                html += `<li class="list-group-item">
                            <strong>Câu hỏi ${displayIndex}</strong><br/>
                            <strong>Nội dung:</strong> ${q.content}
                         </li>`;
            } else {
                html += `<li class="list-group-item">Câu hỏi ID: ${id} (không tìm thấy)</li>`;
            }
        }

            html += '</ul>';

            // Thêm phân trang
            const totalPages = Math.ceil(selectedQuestionIds.length / pageSize);
            html += `<nav class="mt-3"><ul class="pagination justify-content-center">`;
            for (let i = 1; i <= totalPages; i++) {
                html += `<li class="page-item ${i === page ? 'active' : ''}">
                            <a class="page-link" href="#" onclick="renderSelectedQuestionsPage(${i})">${i}</a>
                         </li>`;
            }
            html += `</ul></nav>`;

            $('#selectedQuestionsList').html(html);
        }


               function showSelectedQuestionsModal() {
            $.ajax({
                type: 'POST',
                url: '/Exam/GetSelectedQuestions',
                contentType: 'application/json',
                data: JSON.stringify(selectedQuestionIds),
                success: function (questions) {
                    selectedQuestionsData = questions;
                    renderSelectedQuestionsPage(1);
                    const modal = new bootstrap.Modal(document.getElementById('selectedQuestionsModal'));
                    modal.show();
                },
                error: function () {
                    alert("Không thể tải nội dung câu hỏi.");
                }
            });
        }


               function showExamInfoModal() {
    // Xóa dữ liệu modal trước khi hiển thị
    $('#modalTitle').val('');
    $('#modalDescription').val('');
    $('#modalSourceText').val('');
    $('#modalSubjectId').val('');
    $('#modalIsPublic').val('true');
    $('#totalTimeSelect').val('');
    $('#totalTimeHidden').val('');

    $('#examInfoModal').modal('show');
}

        function submitFinalForm() {
            const title = $('#modalTitle').val().trim();
            const description = $('#modalDescription').val().trim();
                    let sourceText = $('#sourceTextSelect').val();
        if (sourceText === 'Khác') {
            const customInput = $('#customSourceText').val();
            sourceText = customInput ? customInput.trim() : '';
        }

            const subjectId = $('#modalSubjectId').val();
            const isPublic = $('#modalIsPublic').val();

            const totalQuestion = parseInt($('#randomCount').val());
            const selectedCount = selectedQuestionIds.length;
                    const totalTime = parseInt($('#totalTimeSelect').val());
        $('#totalTimeHidden').val(totalTime);

                    if (!title || !description || !sourceText || !subjectId || !totalTime) {
                Swal.fire('Lỗi', 'Vui lòng nhập đầy đủ thông tin.', 'error');
                return;
            }

            if (selectedCount !== totalQuestion) {
                const diff = totalQuestion - selectedCount;
                Swal.fire('Lỗi', diff > 0 ? `Bạn còn thiếu ${diff} câu hỏi.` : `Bạn đã chọn thừa ${Math.abs(diff)} câu hỏi.`, 'error');
                return;
            }

            $('input[name="Title"]').val(title);
            $('input[name="Description"]').val(description);
            $('input[name="SourceText"]').val(sourceText);
            $('input[name="SubjectId"]').val(subjectId);
            $('input[name="IsPublic"]').val(isPublic);
                    $('input[name="TotalTime"]').val(totalTime);
            $('#totalQuestionHidden').val(selectedCount);

            $('input[name="SelectedQuestionIds"]').remove();
            selectedQuestionIds.forEach(function (id) {
                $('<input>').attr({
                    type: 'hidden',
                    name: 'SelectedQuestionIds',
                    value: id
                }).appendTo('#createExamForm');
            });

            $('#createExamForm')[0].submit();
        }
    </script>
   

    <script>
         

            function loadQuestions() {
            const filterData = $('#search-form').serialize(); // Nếu bạn có form lọc

            $.ajax({
                url: '/Exam/SearchQuestions', // Hoặc endpoint nào bạn dùng
                type: 'GET',
                data: filterData,
                success: function (res) {
                    $('#question-list-container').html(res); // ID của div chứa danh sách câu hỏi
                },
                error: function () {
                    toastr.error('Không thể tải lại danh sách câu hỏi');
                }
            });
        }


      


         function loadQuestions(page = 1) {
             var questionTypeId = $('#questionTypeFilter').val() || null;
             var levelId = $('#levelFilter').val() || null;
             var keyword = $('#keywordFilter').val().trim() || null;

             $.ajax({
                 url: '@Url.Action("SearchQuestions", "Exam")',
                 data: {
                     questionTypeId: questionTypeId,
                     levelId: levelId,
                     keyword: keyword,
                     page: page
                 },
                 success: function (result) {
                     $('#searchResults').html(result);

                     // Đánh dấu lại checkbox cho các câu đã chọn
                     selectedQuestionIds.forEach(function (id) {
                         $('.question-checkbox[value="' + id + '"]').prop('checked', true);
                     });
                 }
             });
         }

         $(document).on('change', '.question-checkbox', function () {
             var questionId = parseInt($(this).val());
             if ($(this).is(':checked')) {
                 if (!selectedQuestionIds.includes(questionId)) {
                     selectedQuestionIds.push(questionId);
                 }
             } else {
                 selectedQuestionIds = selectedQuestionIds.filter(id => id !== questionId);
             }
         });

         $(document).on('click', '.pagination a', function (e) {
             e.preventDefault();
             var page = $(this).data('page');
             loadQuestions(page);
         });

         $('#btnSearch').click(function () {
             loadQuestions(1);
         });

         $(document).ready(function () {
             loadQuestions(1);
         });

        // Tìm kiếm câu hỏi
        $('#btnSearch').click(function () {
            var questionTypeId = $('#questionTypeFilter').val() || null;
            var levelId = $('#levelFilter').val() || null;
            var keyword = $('#keywordFilter').val().trim() || null;

            $.ajax({
                url: '@Url.Action("SearchQuestions", "Exam")',
                data: {
                    questionTypeId: questionTypeId,
                    levelId: levelId,
                    keyword: keyword
                },
                success: function (result) {
                    $('#searchResults').html(result);

                    // Đánh dấu lại checkbox cho các câu đã chọn
                    selectedQuestionIds.forEach(function (id) {
                        $('.question-checkbox[value="' + id + '"]').prop('checked', true);
                    });
                   

                    if (typeof showPage === "function") {
                        showPage(1);
                    }
                }
            });
        });
     

        // Hàm load dữ liệu theo trang
        function loadPage(page) {
            var questionTypeId = $('#questionTypeFilter').val() || null;
            var levelId = $('#levelFilter').val() || null;
            var keyword = $('#keywordFilter').val().trim() || null;

            $.ajax({
                url: '@Url.Action("SearchQuestions", "Exam")',
                data: {
                    questionTypeId: questionTypeId,
                    levelId: levelId,
                    keyword: keyword,
                    page: page,
                    pageSize: 10 // hoặc lấy từ ViewBag.PageSize nếu động
                },
                success: function (result) {
                    $('#searchResults').html(result);

                    // Đánh dấu lại checkbox cho các câu đã chọn
                    selectedQuestionIds.forEach(function (id) {
                        $('.question-checkbox[value="' + id + '"]').prop('checked', true);
                    });
                }
            });
        }

        // Gán sự kiện click cho các nút phân trang (sau mỗi lần load lại kết quả)
        $(document).on('click', '.pagination-link', function (e) {
            e.preventDefault();
            var page = $(this).data('page');
            loadPage(page);
        });


                // ✅ Validate form trước khi submit
        $('#createExamForm').submit(function (e) {
            e.preventDefault(); // Ngăn submit mặc định

            const errors = [];

            const title = $('input[name="Title"]').val().trim();
            const description = $('textarea[name="Description"]').val().trim();
            const sourceText = $('input[name="SourceText"]').val().trim();
            const subjectId = $('select[name="SubjectId"]').val();
            const totalQuestion = parseInt($('#randomCount').val());
            const selectedCount = selectedQuestionIds.length;
            const totalTime = parseInt($('#totalTimeSelect').val());
                 console.log("TotalTime selected:", totalTime);
        $('#totalTimeHidden').val(totalTime);

            $('#totalQuestionHidden').val(selectedCount);

            // ❌ Kiểm tra thiếu thông tin
            if (!title || !description || !sourceText || !subjectId) {
                errors.push("Vui lòng điền đầy đủ các trường bắt buộc.");
            }

            // ❌ Kiểm tra số lượng câu hỏi
            if (selectedCount !== totalQuestion) {
                const diff = totalQuestion - selectedCount;
                const message = diff > 0
                    ? `Bạn còn thiếu ${diff} câu hỏi.`
                    : `Bạn đã chọn thừa ${Math.abs(diff)} câu hỏi.`;
                errors.push(message);
            }

            if (errors.length > 0) {
                Swal.fire({
                    icon: 'error',
                    title: 'Không thể tạo đề',
                    html: '<ul style="text-align:left;">' + errors.map(e => `<li>${e}</li>`).join('') + '</ul>'
                });
                return;
            }

            // ✅ Gỡ input cũ nếu có
            $('input[name="SelectedQuestionIds"]').remove();

            // ✅ Thêm input ẩn cho từng ID đã chọn
            selectedQuestionIds.forEach(function (id) {
                $('<input>').attr({
                    type: 'hidden',
                    name: 'SelectedQuestionIds',
                    value: id
                }).appendTo('#createExamForm');
            });

            // ✅ Submit thật
            this.submit();
        });

        // ✅ Hiển thị thông báo từ server sau khi redirect
                    $(document).ready(function () {
            let errors = [];

            // ❌ Lỗi từ server
        @if (TempData["Error"] != null)
        {
            <text>errors.push("@TempData["Error"]");</text>
        }

            if (errors.length > 0) {
                Swal.fire({
                    icon: 'error',
                    title: 'Lỗi!',
                    html: '<ul style="text-align:left;">' + errors.map(e => `<li>${e}</li>`).join('') + '</ul>'
                });
            }

            // ✅ Thông báo thành công rồi chuyển sang trang PreviewExam
        @if (TempData["Success"] != null && TempData["RedirectToPreview"] != null)
        {
            <text>
                let seconds = 5;
                const redirectUrl = '/Exam/PreviewExam?examId=@TempData["RedirectToPreview"]';
                let cancelled = false;

                Swal.fire({
                    icon: 'success',
                    title: '🎉 Tạo đề thành công!',
                    html: `
                        <div style="font-size: 1.1rem; margin-top: 10px;">
                            Bạn sẽ được chuyển đến <b>trang xem trước đề thi</b> sau <span id="countdown" style="color:#d33; font-weight:bold;">${seconds}</span> giây.
                        </div>
                        <div style="margin-top: 15px;">
                            <img src="https://cdn-icons-png.flaticon.com/512/2906/2906276.png" alt="Success Icon" width="80"/>
                        </div>
                    `,
                    showCancelButton: true,
                    cancelButtonText: '⛔ Hủy chuyển hướng',
                    showConfirmButton: false,
                    timer: seconds * 1000,
                    timerProgressBar: true,
                    background: '#fffefa',
                    backdrop: `rgba(0, 0, 0, 0.4) center center no-repeat`,
                    didOpen: () => {
                        const countdownSpan = document.getElementById('countdown');
                        const interval = setInterval(() => {
                            if (cancelled) {
                                clearInterval(interval);
                                return;
                            }
                            seconds--;
                            countdownSpan.textContent = seconds;
                            if (seconds <= 0) clearInterval(interval);
                        }, 1000);
                    }
                }).then((result) => {
                    if (!result.dismiss || result.dismiss !== Swal.DismissReason.cancel) {
                        if (!cancelled) {
                            window.location.href = redirectUrl;
                        }
                                 } else {
                        cancelled = true;
                        
                    }
                });
            </text>


        }

        });

    </script>
    <script>
        $(document).ready(function () {
            $('#sourceTextSelect').change(function () {
                const selectedValue = $(this).val();
                if (selectedValue === 'Khác') {
                    $('#customSourceText').val('').show();
                } else {
                    $('#customSourceText').val(selectedValue).hide();
                }
            });
        });
    </script>


}
